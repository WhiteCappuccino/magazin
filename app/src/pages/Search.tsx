import { useState } from 'react'
import { useSearchParams } from 'react-router-dom'
import { ProductCard, type Product } from '../components/ProductCard'
import blinchiki from '@img/blinchiki.png'
import kolbasa2 from '@img/kolbasa2.png'
import moloko from '@img/moloko.png'
import sosiski from '@img/sosiski.png'

const mockProducts: Product[] = [
	{ id: '1', title: '–ú–æ–ª–æ–∫–æ 3.2% 1–ª', price: 89.90, oldPrice: 99.90, image: blinchiki, rating: 4, discountPercent: 10 },
	{ id: '2', title: '–•–ª–µ–± –±–µ–ª—ã–π –Ω–∞—Ä–µ–∑–Ω–æ–π', price: 45.00, image: blinchiki, rating: 5 },
	{ id: '3', title: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ –°1', price: 120.00, image: blinchiki, rating: 4 },
	{ id: '4', title: '–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π 45%', price: 350.00, image: blinchiki, rating: 5 },
	{ id: '5', title: '–ö–æ–ª–±–∞—Å–∞ –î–æ–∫—Ç–æ—Ä—Å–∫–∞—è', price: 280.00, image: blinchiki, rating: 4 },
	{ id: '6', title: '–ú—è—Å–æ –≥–æ–≤—è–¥–∏–Ω–∞', price: 450.00, image: blinchiki, rating: 5 },
	{ id: '7', title: '–ú–æ–ª–æ–∫–æ 2.5% 1–ª', price: 79.90, image: blinchiki, rating: 4 },
	{ id: '8', title: '–•–ª–µ–± —Ä–∂–∞–Ω–æ–π', price: 55.00, image: blinchiki, rating: 4 },
	{ id: '9', title: '–Ø–π—Ü–∞ –ø–µ—Ä–µ–ø–µ–ª–∏–Ω—ã–µ', price: 180.00, image: blinchiki, rating: 5 },
	{ id: '10', title: '–°—ã—Ä –ì–∞—É–¥–∞', price: 420.00, image: blinchiki, rating: 4 },
	{ id: '11', title: '–ö–æ–ª–±–∞—Å–∞ –°–µ—Ä–≤–µ–ª–∞—Ç', price: 320.00, image: blinchiki, rating: 5 },
	{ id: '12', title: '–ú—è—Å–æ —Å–≤–∏–Ω–∏–Ω–∞', price: 380.00, image: blinchiki, rating: 4 }
]

export default function SearchPage() {
	const [searchParams] = useSearchParams()
	const query = searchParams.get('q') || ''
	
	const [priceRange, setPriceRange] = useState([0, 1000])
	const [selectedCategories, setSelectedCategories] = useState<string[]>([])
	const [sortBy, setSortBy] = useState('relevance')

	const categories = ['–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ', '–ú—è—Å–æ –∏ –∫–æ–ª–±–∞—Å—ã', '–Ø–π—Ü–∞', '–°—ã—Ä—ã']

	const filteredProducts = mockProducts.filter(product => {
		const matchesQuery = product.title.toLowerCase().includes(query.toLowerCase())
		const matchesPrice = product.price >= priceRange[0] && product.price <= priceRange[1]
		return matchesQuery && matchesPrice
	})

	const handleCategoryToggle = (category: string) => {
		setSelectedCategories(prev => 
			prev.includes(category) 
				? prev.filter(c => c !== category)
				: [...prev, category]
		)
	}

	return (
		<div className="space-y-6">
			<div className="flex items-center justify-between">
				<div>
					<h1 className="text-2xl font-bold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h1>
					{query && (
						<p className="text-neutral-600">–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∞–π–¥–µ–Ω–æ {filteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤</p>
					)}
				</div>
				<div className="flex items-center gap-3">
					<select 
						value={sortBy} 
						onChange={(e) => setSortBy(e.target.value)}
						className="rounded-lg border border-neutral-300 bg-white px-3 py-2 text-sm"
					>
						<option value="relevance">–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏</option>
						<option value="price-asc">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã</option>
						<option value="price-desc">–ü–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã</option>
						<option value="rating">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
					</select>
				</div>
			</div>

			<div className="grid grid-cols-1 gap-6 lg:grid-cols-4">
				{/* –§–∏–ª—å—Ç—Ä—ã */}
				<div className="space-y-6">
					<div className="rounded-2xl bg-white p-6 ring-1 ring-black/5">
						<h3 className="mb-4 text-lg font-semibold">–§–∏–ª—å—Ç—Ä—ã</h3>
						
						{/* –¶–µ–Ω–∞ */}
						<div className="mb-6">
							<h4 className="mb-3 text-sm font-medium">–¶–µ–Ω–∞</h4>
							<div className="space-y-2">
								<input
									type="range"
									min="0"
									max="1000"
									value={priceRange[1]}
									onChange={(e) => setPriceRange([priceRange[0], Number(e.target.value)])}
									className="w-full"
								/>
								<div className="flex justify-between text-xs text-neutral-600">
									<span>{priceRange[0]} ‚ÇΩ</span>
									<span>{priceRange[1]} ‚ÇΩ</span>
								</div>
							</div>
						</div>

						{/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
						<div>
							<h4 className="mb-3 text-sm font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h4>
							<div className="space-y-2">
								{categories.map(category => (
									<label key={category} className="flex items-center gap-2">
										<input
											type="checkbox"
											checked={selectedCategories.includes(category)}
											onChange={() => handleCategoryToggle(category)}
											className="rounded border-neutral-300"
										/>
										<span className="text-sm">{category}</span>
									</label>
								))}
							</div>
						</div>
					</div>
				</div>

				{/* –¢–æ–≤–∞—Ä—ã */}
				<div className="lg:col-span-3">
					{filteredProducts.length > 0 ? (
						<div className="grid grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-3">
							{filteredProducts.map(product => (
								<ProductCard key={product.id} product={product} />
							))}
						</div>
					) : (
						<div className="rounded-2xl bg-white p-12 text-center ring-1 ring-black/5">
							<div className="text-6xl mb-4">üîç</div>
							<div className="text-xl font-semibold mb-2">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
							<div className="text-neutral-600">
								{query ? `–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´${query}¬ª —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã` : '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'}
							</div>
						</div>
					)}
				</div>
			</div>
		</div>
	)
}
